import '../css/Scanning.css';
import { useState, useRef } from 'react';

const Scanning = () => {
  const [products, setProducts] = useState('');
  const [sortBy, setSortBy] = useState('price');
  const [results, setResults] = useState([]);
  const [error, setError] = useState('');
  const [page, setPage] = useState(1);
  const [count, setCount] = useState(null);
  const imageInputRef = useRef();

  const fetchRecipes = async (pageToFetch = 1) => {
    setError('');
    setResults([]);

    const imageFile = imageInputRef.current.files[0];
    let fetchOptions;

    const url = new URL('http://localhost:8000/api/recipes-with-prices/');
    url.searchParams.set('page', pageToFetch); // üëà Query-–ø–∞—Ä–∞–º–µ—Ç—Ä

    if (imageFile) {
      const formData = new FormData();
      formData.append('image', imageFile);
      formData.append('sort_by', sortBy);
      if (products.trim()) {
        formData.append('products', products.trim());
      }
      fetchOptions = { method: 'POST', body: formData };
    } else {
      const productList = products
        .split(',')
        .map((p) => p.trim())
        .filter((p) => p);

      if (productList.length === 0) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.');
        return;
      }

      fetchOptions = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: productList, sort_by: sortBy }),
      };
    }

    try {
      const response = await fetch(url, fetchOptions);

      if (!response.ok) {
        setError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        return;
      }

      const data = await response.json();
      const recipes = data.results || [];

      if (recipes.length === 0) {
        setError('–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      } else {
        setResults(recipes);
        setPage(pageToFetch);
        setCount(data.count || null);
      }
    } catch (e) {
      console.error('Fetch error:', e);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${e.message}`);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    fetchRecipes(1); // –≤—Å–µ–≥–¥–∞ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  };

  const totalPages = count && results.length > 0 ? Math.ceil(count / results.length) : null;

  return (
    <div className="container">
      <h1>–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º</h1>
      <form onSubmit={handleSubmit}>
        <label htmlFor="image">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
        <input type="file" id="image" accept="image/*" ref={imageInputRef} />

        <label htmlFor="products">–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
        <input
          type="text"
          id="products"
          value={products}
          onChange={(e) => setProducts(e.target.value)}
          placeholder="–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å, –°—ã—Ä"
        />

        <label htmlFor="sort">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:</label>
        <select id="sort" value={sortBy} onChange={(e) => setSortBy(e.target.value)}>
          <option value="price">–¶–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</option>
          <option value="relevance">–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏</option>
        </select>

        <button className="find-recipe" type="submit">–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã</button>
      </form>

      <div className="result">
        {error && <p style={{ color: 'red' }}>{error}</p>}
        {results.map((item, index) => {
          const { recipe, price, relevance } = item;
          return (
            <div className="recipe" key={index}>
              <h3>{recipe.title || recipe.name}</h3>
              <p>–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {price != null ? `${price.toFixed(2)} ‚ÇΩ` : '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}</p>
              <p>–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance != null ? `${relevance.toFixed(1)}%` : '‚Äî'}</p>
              {recipe.description && <p>{recipe.description}</p>}
              {recipe.link && (
                <p>
                  <a href={recipe.link} target="_blank" rel="noopener noreferrer">
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                  </a>
                </p>
              )}
            </div>
          );
        })}
      </div>

      {totalPages && totalPages > 1 && (
        <div className="pagination" style={{ marginTop: '20px' }}>
          <button onClick={() => fetchRecipes(page - 1)} disabled={page <= 1}>
            ‚óÄ –ù–∞–∑–∞–¥
          </button>
          <span style={{ margin: '0 10px' }}>
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {totalPages}
          </span>
          <button onClick={() => fetchRecipes(page + 1)} disabled={page >= totalPages}>
            –í–ø–µ—Ä—ë–¥ ‚ñ∂
          </button>
        </div>
      )}
    </div>
  );
};

export default Scanning;
