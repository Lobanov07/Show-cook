// src/components/Scanning.jsx
import '../css/Scanning.css';
import { useState, useRef, useEffect } from 'react';
import Main_menu from './Sidebar';
import Preloader1 from '../pages/Preloader1';


const Scanning = () => {
  const [products, setProducts] = useState('');
  const [sortBy, setSortBy] = useState('price');
  const [results, setResults] = useState([]);
  const [error, setError] = useState('');
  const [page, setPage] = useState(1);
  const [count, setCount] = useState(null);
  const imageInputRef = useRef();
  const [previewUrl, setPreviewUrl] = useState(null);
   const [isLoading, setIsLoading] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const url = URL.createObjectURL(file); // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      setPreviewUrl(url);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageRemove = () => {
    setPreviewUrl(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    imageInputRef.current.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
  };

  // –û—á–∏—Å—Ç–∫–∞ URL –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    return () => {
      if (previewUrl) {
        URL.revokeObjectURL(previewUrl); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
      }
    };
  }, [previewUrl]);
  
  const fetchRecipes = async (pageToFetch = 1) => {
    setIsLoading(true);
    setError('');
    setResults([]);

    const imageFile = imageInputRef.current.files[0];

    let fetchOptions;


    const endpoint = '/api/recipes-with-prices/';
    const baseUrl = process.env.REACT_APP_API_URL
    const apiUrl = `${baseUrl.replace(/\/+$/, '')}${endpoint}`;
  
    const url = new URL(apiUrl);
    url.searchParams.set('page', pageToFetch); // üëà Query-–ø–∞—Ä–∞–º–µ—Ç—Ä


    if (imageFile) {
      // multipart/form-data –∑–∞–ø—Ä–æ—Å
      const formData = new FormData();
      formData.append('image', imageFile);
      formData.append('sort_by', sortBy);
      formData.append('products', products.trim());

      // –æ—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è FormData –≤ –∫–æ–Ω—Å–æ–ª—å
      for (let [key, val] of formData.entries()) {
        console.log('formData entry:', key, val);
      }

      fetchOptions = {
        method: 'POST',
        body: formData,
      };
    } else {
      // JSON-–∑–∞–ø—Ä–æ—Å
      const productList = products
        .split(',')
        .map((p) => p.trim())
        .filter(Boolean);

      if (productList.length === 0) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.');
        setIsLoading(false);
        return;
      }

      fetchOptions = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ products: productList, sort_by: sortBy }),
      };
    }

    try {
      const response = await fetch(endpoint, fetchOptions);
      if (!response.ok) {
        setError(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
        return;
      }

      const data = await response.json();
      const list = data.results || [];

      if (list.length === 0) {
        setError('–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      } else {
        setResults(list);
        setPage(pageToFetch);
        setCount(data.count ?? null);
      }
    } catch (e) {
      console.error('Fetch error:', e);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: ${e.message}`);
    }
    finally {
      setIsLoading(false);
    }
  };


  const handleSubmit = (e) => {
    e.preventDefault();
    fetchRecipes(1); // –≤—Å–µ–≥–¥–∞ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
  };

  const totalPages = count ? Math.ceil(count / 5) : 1;


  return (
    <>
    <div className='flexible_show'>
            <Main_menu />
        </div>
    <div className="container">
      <h1>–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º</h1>

      <div className="form-block">
        <label >–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
        <label htmlFor="image" className={`setphotoforrecipes ${previewUrl ? 'hidden' : ''}`} >–ó–ê–ì–†–£–ó–ò–¢–¨ –§–û–¢–û</label> 
        <input
            type="file"
            id="image"
            accept="image/*"
            ref={imageInputRef}
            onChange={handleImageChange} // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          />
          {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          {previewUrl && (
            <div className="image-preview" style={{ marginTop: '10px' }}>
              <img
                src={previewUrl}
                alt="Preview"
                style={{ maxWidth: '200px', maxHeight: '200px', objectFit: 'contain' }}
              />
              <button
                type="button"
                onClick={handleImageRemove}
                style={{ marginLeft: '10px', color: 'red' }}
              >
                üóëÔ∏è
              </button>
            </div>
          )}


        <label htmlFor="products">–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
        <input
          type="text"
          id="products"
          value={products}
          onChange={(e) => setProducts(e.target.value)}
          placeholder="–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å, –°—ã—Ä"
        />

        <label htmlFor="sort">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:</label>
        <select
          id="sort"
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
        >
          <option value="price">–¶–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</option>
          <option value="relevance">–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏</option>
        </select>

        <button
          type="button"
          className="find-recipe"
          onClick={() => fetchRecipes(1)}
        >
          –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã
        </button>
      </div>
      
      <div className={`result ${results.length === 0 && !isLoading && !error ? 'hidden' : ''}`}>

        {isLoading && <Preloader1 />}
        {error && (<p style={{ color: 'red', textAlign: 'center', fontSize: '20px'}}>{error}</p>)}
        {results.map((item, index) => {
          const { recipe, price, relevance } = item;
          return (
            <div className="recipe" key={index}>
              <h3>{recipe.title || recipe.name}</h3>
              <p>–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {price != null ? `${price.toFixed(2)} ‚ÇΩ` : '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}</p>
              <p>–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance != null ? `${relevance.toFixed(1)}%` : '‚Äî'}</p>
              {recipe.description && <p>{recipe.description}</p>}
              {recipe.link && (
                <p>
                  <a href={recipe.link} target="_blank" rel="noopener noreferrer">
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                  </a>
                </p>
              )}
            </div>
          );
        })}
      </div>

      {totalPages && totalPages > 1 && !isLoading && !error && (
        <div className="pagination" style={{ marginTop: '25px'}}>
          <button className="button-row" onClick={() => fetchRecipes(page - 1)} disabled={page <= 1}>
            ‚Æú –ù–∞–∑–∞–¥

          </button>
          <span>
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {totalPages}
          </span>

          <button className="button-row" onClick={() => fetchRecipes(page + 1)} disabled={page >= totalPages}>
            –í–ø–µ—Ä—ë–¥ ‚Æû

          </button>
        </div>
      )}
    </div>
    </>
  );
};

export default Scanning;
